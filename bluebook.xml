<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article>
<article xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         >
<info>
    <title>
        Pathagar Installation Notes- on Raspberry Pi (+/- Rachel)
    </title>
    <authorgroup>
      <author>
        <personname>
          <firstname>Alex</firstname>
          <surname>Kleider</surname>
        </personname> 
        <email>akleider@sonic.net</email>
      </author>
      <author>
        <personname>
          <honorific>Prof</honorific>
          <firstname>Sameer</firstname>
          <surname>Verma</surname>
          <lineage>PhD</lineage>
        </personname>
        <email>sverma@sfsu.edu</email> 
        </author>
      <author>
        <personname>
          <firstname>Aaron</firstname>
          <surname>Borden</surname>
        </personname>
        <email>adborden@live.com</email> 
        </author>
    </authorgroup>
<abstract>
    <para>
        This documents the installation of the
        <application>Pathagar</application>
        book server with in a virtual environment
        (<application>virtualenv</application>) on to a
        <systemitem> Raspberry Pi</systemitem>,
        possibly already running
        <link xlink:href="http://www.worldpossible.org/pi">
        <application>Rachel</application>
        </link>
        <footnote>
            <para>
            What's described at the worldpossible site is their
            current version which requires a 64 gigabyte sd card.
            Their original version fit onto a 32 gigabyte sd card.
            Our use case is for the XO laptop clients which can not 
            read mp4 video files so these had to be converted to
            webm format which takes up more space necessitating a 64
            gigabyte card.  Conversion of the current version would
            exceed the capacity of a 64 gigabyte card; 128 gigabyte
            cards, although they do now exist, do not function
            inside the Raspberry Pi.
            </para>
        </footnote>. It includes setting up the <systemitem>
        Raspberry Pi</systemitem> as it comes <emphasis>out of the box
        </emphasis>.
    </para>
</abstract>

    <copyright><year>2012, 2013</year></copyright>
</info>

<acknowledgements><formalpara><title>Acknowledgements</title><para>
We wish to express gratitude to those who began, developed and documented
the Pathagar project making our use of it possible.</para></formalpara>
<itemizedlist>
<listitem><para><personname><firstname>Sayamindu</firstname>
<surname>Dasgupta</surname></personname>
<email>sayamindu@gmail.com</email></para>
</listitem>
<listitem><para><personname><firstname>Kushal</firstname>
<surname>Das</surname></personname>
<email>kushal@fedoraproject.org</email></para>
</listitem>
<listitem><para><personname><firstname>Manuel</firstname>
<surname>Qui√±ones</surname></personname>
<email>manuq@laptop.org</email></para>
</listitem>
<listitem><para><personname><firstname>James</firstname>
<surname>Simons</surname></personname></para>
</listitem>
<listitem> <para> <personname><firstname>Raj </firstname>
<surname>Kumar </surname> </personname> 
<email>raj@archive.org</email> </para>
</listitem>
<listitem> <para> <personname><firstname>Bernie </firstname>
<surname>Innocenti </surname> </personname> 
<email>bernie@codewiz.org</email> His URL says it all!</para>
</listitem>
<listitem> <para> <personname><firstname>Seth </firstname>
<surname>Woodworth </surname> </personname> 
<email>seth@laptop.org</email> </para>
</listitem>
</itemizedlist>
</acknowledgements>

<sect1 xml:id="intro"><title>Introduction</title>
<sect2 xml:id="background"><title>Background</title>
<para>On Sun Jun 17 2012, Sameer Verma and Alex Kleider got together to document
installation of the Pathagar book server onto a virtual machine. What was
learned at that session was then applied the following day to do the same
onto a <trademark>GlobalScaleTechnologies</trademark>
<hardware>DreamPlug</hardware>.  Late in 2012 we met with Raj Kumar at the
Internet Archives where Raj added support for bulk importing (documented
but missing from the source code we were using) using the json format.  On
February 3, 2013, during a Sugar Coding Hackathon Bernie Innocenti helped
with debugging a Dreamplug using a JTAG connector and subsequently solved a
recurring permissions problem having to do with the pathagar database file
directory.  </para>
<para> Subsequently the project was revived by Seth Woodworth and moved to
its <link xlink:href="https://github.com/PathagarBooks/pathagar">
current github location.</link></para>

<para>This current documentation project also exists
<link xlink:href="https://github.com/alexKleider/pathagar-docs">
on github</link> and is licensed under a 
<link xlink:href="http://creativecommons.org/licenses">
CreativeCommons</link>
Attribution-NonCommercial-ShareAlike 3.0 Unported License.
</para> 
</sect2> <!--end of Back Ground -->

<sect2 xml:id="organization"> <title>Orgainzation of the Text</title>
<para>
In <link linkend="vmInstall"> 
<literal>Virtual Machine and OS Installation</literal></link> 
we describe how to set up a Virtual Machine and how to install an
Operating System onto that machine in preparation for installing pathager.  
It can be skipped by those who are installing onto the Dreamplug or some
other (non virtual) server.  </para>
<para>
Instead of using a Virtual Machine,
one may want to install onto a real machine and we will assume this to be
a Dreamplug or some other Debian based server. Doing so is described in the
<link linkend="prepareServer"><literal>Prepare the Server</literal></link>
section.  </para>
<para>
The <link linkend="patInstall">
<literal>Pathagar Installation</literal></link> 
section applies to both the VM environment and to real hardware.  </para>
<para> 
Sections
<link linkend="testingVM"> 
<literal>Testing under VM</literal></link>
and 
<link linkend="deployPat"> 
<literal>Deploying Pathagar</literal></link>
apply respectively to the VM environment and to the physical machine.
</para>
</sect2> <!-- end of Organization of the Text -->

 

<sect2><title>Assumptions</title>
<para>It is assumed that the reader is familiar with the usual
<systemitem>Linux</systemitem> prompts <prompt>$</prompt>
and <prompt>#</prompt> signifying user and root privileges respectively.
When dealing with <systemitem>Ubuntu</systemitem>, if root privileges are
required, <prompt>#</prompt> can be emulated by using the
<command>sudo</command> as follows: 
<programlisting>$ sudo CommandOfYourChoice</programlisting>
Conversely, if in this text you see code as shown above, and you know how
to gain root privileges (and why would you not if running Debian) you can 
<programlisting> $ su root</programlisting> to gain root privileges and then 
run commands without the <command>sudo</command> component.</para>
</sect2> <!-- End of Assumptions -->

</sect1> <!-- End of Introduction -->

<sect1 xml:id="vmInstall"><title> Virtual Machine and OS Installation </title>
<sect2><title>Install Virtual Box</title>
<para>Virtual Box is available for linux, mac and windows. We assume you
are running a Debian based version of Linux, most likely Ubuntu.
<programlisting>
$ sudo apt-get install virtualbox
</programlisting></para>
</sect2> <!-- End of Install VB -->

<sect2><title>Download an Operating System</title>
<para>You will need an operating system to install on to your virtual 
machine in order to then run the book server 
<footnote><para> 
To simplify this a <application>Pathagar VM</application>
application is available for 
<link 
xlink:href="http://dev.laptop.org/~sverma/pathagar/vm-pathagar.ova.zip">
download here.</link>
This provides an OVA file (the operating
system with Pathagar book server already installed) which VirtualBox
considers an "Appliance". More information is available in the 
<link linkend="ova">appendix</link>.
</para></footnote>. 
<systemitem>Ubuntu Server 12.04 LTS</systemitem> is suggested. To download
it, connectivity is of course required. The url keeps changing so rather than 
useing <command>wget</command>, simply go to to the Ubuntu web site and
look for the download link. Make a note of where the downloaded file is 
stored: most likely
<filename>~/Downloads</filename>.</para>
</sect2> <!-- End of Download and OS -->

<sect2><title>Create a profile for the virtual image</title> 
<para>
<literallayout>
    In VirtualBox 
    New => "Create New Virtual Machine" Wizard => Next
        Name: vmPathagar, OSType: Linux, Version: Ubuntu
    Next  1024 RAM  # Can be resized later if needed.
    Next  check Startup Disk
          check Create new disk
    Next  File type: VMDK  # Sameer's choice, VM Ware compatible.
    Next  Dynamically allocated  # Works well.
    Next  -accept 8G default
    Next  -summary
    Create
</literallayout></para>
</sect2>
<sect2><title>Install the Operating System</title>
<para> This provides a shell of an image but no content. You must set it to
boot from the server iso that you have downloaded.
<literallayout>
    Menu => Machine Settings
        Storage
            check Empty  -pick iso image
            choose virtual disk => ~/Downloads/ubuntu..iso  (open)
    OK
    Menu => Start
        -does an installation, defaults are good for most responses.
    Some of the choices we made:
        Hostname: phbs
        user account: pat    password: "pat's password"
        time zone: usla (default was correct)
        use entire disk
        default: virtual disk partition
        partition table yes                   OpenSSH
        Proxy none
          no automatic updates
        Base install pluss OpenSSH  (No need for any of the others.)
        Install GRUB2 to MBR
        Done - Continue
    Reboot => installed system ubuntu server which we called vm.pathagar.
</literallayout></para>
<literallayout>
Still in VM, Open Ubuntu server vm.pathagar.
    phbs login: pat     
    password: "pat's password"
</literallayout>
<para> This logs you onto Ubuntu running in VM. 
You are now ready to install pathagar. You'll likely want to skip the 
next section since it applies only if you are
planning to install pathagar on a real machine, not on the VM.
</para>
</sect2> <!-- End of Install the Operating System -->
</sect1> <!-- End of Virtual Machine and OS Installation -->

<sect1 xml:id="prepareServer"><title>Prepare the Server</title>
<sect2> <title>Preliminaries</title>
<para> This section is for those who are installing onto real hardware
rather than the Virtual Machine.  We have used Debian as our OS of choice.
If yours is a non-Debian based distro, you may find that the commands are
different. </para>
</sect2>
<sect2> <title>Connect and Install</title>
<para> Ensure that your Dreamplug, Raspberry Pi (or what ever server you 
have choosen) is connected to the internet so that you can update, 
upgrade and install Apache.  
<programlisting>
    # apt-get update 
    # apt-get upgrade
    # apt-get install apache2 
</programlisting>
Now you are ready to 
<link linkend="patInstall">install Pathagar</link>.
</para>
</sect2>
</sect1>

<sect1 xml:id="patInstall"><title>Pathagar Installation</title>

<sect2><title>Bring in Pathagar and its Dependencies</title>
<para> You will need an internet connection to install pathagar and all it's
dependencies.  Update and upgrade the
operating system, install the necessary packages from the 
repositories, and set up a 'bookserver' user. From this point on,
up to, but not including, the testing phase, the instructions are the same
for installation onto some other server. My notation will use
<prompt>#</prompt> for commands that require root privileges and
<prompt>$</prompt> for those that do not. Remember that <prompt>$ sudo</prompt>
is the way to run commands requiring root priviledges on a Debian derived
system such as Ubuntu.
<programlisting>
    # apt-get update; apt-get upgrade
    # apt-get install apache2 libapache2-mod-python libapache2-mod-wsgi
    # apt-get install sqlite3 git python-pip
<!--  The use of pip install -r requirements.pip eliminates the need for:
    # apt-get install python-django python-django-tagging
    # apt-get install python-setuptools
-->
    # adduser bookserver  
    # mkdir /opt/Bookserver
    # chown bookserver:bookserver /opt/Bookserver
    # su - bookserver
    $ cd /opt/Bookserver
    $ pwd
    $ whoami
</programlisting>

<footnote> <para> It has been my convention to capitalize the first letter 
of directories that I create; hence <filename>/opt/Bookserver</filename> 
rather than <filename>/opt/bookserver</filename>.  </para> </footnote>

<footnote> <para> apache2 may be already installed on your server by
default. Once it is installed it would be a good idea to add a Fully
Qualified Domaine Name (FQDN) to its configuration to avoid the annoying
"unable to determine FQDN" warnings that are generated. To do so add a line
of the form:
<literal xml:id='fqdn'>
ServerName pathagar.info
</literal>
(substituting your own FQDN for 'pathagar.info') to 
<filename>/etc/apache2/apache2.conf</filename>
or to one of the to be enabled files in the 
<filename>/etc/apache2/sites-available</filename>
directory. An alternative, and perhaps simpler, way of preventing this 
warning is to edit /etc/hosts and add your FQDN to the 127.0.0.1 line.
</para> </footnote>

<footnote>  <para>  Note that pathagar calls for sqlite3 rather
than sqlite. (I don't think they conflict so both might be OK.) </para>
</footnote> 

</para>

<para>
You will need to provide a password for the newly created user "bookserver".
Before going on, be sure that the out put of the <command>whoami</command> 
and <command>pwd</command> commands are 
<computeroutput>bookserver</computeroutput> and 
<computeroutput>/opt/Bookserver</computeroutput> respectively.
The next listing is to install the 
<application>pathagar</application> book server.
<!--The new location of Pathagar is at https://github.com/PathagarBooks
>> This is essentially the core plus changes by Raj Kumar at the Internet
>> Archive and Seth Woodworth at p.irateship.
-->
<programlisting>
    $ git clone git://github.com/PathagarBooks/pathagar.git
    $ cd pathagar
    $ su - root
    # cd /opt/Bookserver/pathagar
    # pip install -r requirements.pip
    # exit
</programlisting>
Note that the <command>pip install</command> command must be run 
by root from the pathagar directory. Hence the need for the 
<command>su</command>
and the second <command>cd</command> commands.
<footnote><para> Our first experience was with the source code from 
<programlisting>
    $ git clone git://github.com/manuq/pathagar 
</programlisting> Raj Kumar pushed his mofifications to
"git://github.com/rajbot/pathagar"
and that in turn was modified by Seth Woodworth who's version we are
currently using.  Seth has greatly simplified installation with the use of
<application>python-pip</application>. </para>
<para> The current Pathagar code can be found at 
<link xlink:href="https://github.com/PathagarBooks/pathagar">
https://github.com/PathagarBooks/pathagar</link>.
</para>
</footnote>
</para>
</sect2> <!-- End of Bring in Pathagar and its Dependencies -->

<sect2> <title>Pathagar Configuration</title>
<para> This is done by modifying the 'settings.py' file.  Make changs as
shown here. 
<footnote><para> We found James Simmons' tutorial very useful although
now since Seth's changes, it might prove more confusing than helpful. It can be found
<link xlink:href=
"http://en.flossmanuals.net/e-book-enlightenment/the-pathagar-book-server">
here.</link> </para>
</footnote> 
<literallayout>
    ADMINS = (
        # ("your name", "your email"),
    )

    DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(CUR_DIR, 'db/database.db'),
        }
    }

    TIME_ZONE = 'America/Los_Angeles'

    # MEDIA_URL = '/static_media/'
    MEDIA_URL = '/static_media'

    SECRET_KEY = "add a few characters to what's already there"
    
</literallayout>
<orderedlist>
<listitem><para>
Uncomment (delete the <prompt>#</prompt>) and enter your own name(s) and 
email address(es) in the <varname>ADMINS</varname> assignment.
</para> </listitem>
<listitem><para>
Don't forget to change the 'DATABASES' entry. Change
<filename>database.db</filename> to <filename>db/database.db</filename>.
(Don't change it if you do not plan to follow our advice to place the 
<filename>database.db</filename> file into its own subdirectory. 
See the next section.) 
</para> </listitem>
<listitem><para>
'America/Los_Angeles' works for us here in San Franciso.
To find your own time zone, consult the list of all the time zones in the 
tz database which can be found 
<link xlink:href=
"http://en.wikipedia.org/wiki/List_of_tz_database_time_zones">here.</link>
</para> </listitem> 
<listitem><para>
Until Seth changes his code, you will have to delete the trailing '/' of 
the <varname>MEDIA_URL</varname> assignment so it reads 
<parameter>/static_media</parameter> rather than
<parameter>/static_media/</parameter>.
</para> </listitem>
<listitem><para>
Add a few characters to the existing key to avoid having a
"secret" that is known to other users of this download.
</para>  </listitem>
</orderedlist>
</para>
</sect2>  <!-- End of Pathagar Configuration -->

<sect2><title>Database Initialization</title>
<para> For reasons to be discussed a little later under 
'Ownerships and Permissions', we've come to the conclusion that 
it is better to have the data base in it's own subdirectory.  
The following code creates/initializes the data base and then puts it into
its own subdirectory. (Do not run the middle of the three commands if you
have decided not to follow our advice to put the 
<filename>database.db</filename> file into its own directory.)
<programlisting>
    $ cd /opt/Bookserver/pathagar
    $ mkdir db
    $ python manage.py syncdb
</programlisting>
You will be given an opportunity to set up an administrative account.  We
chose to use the same name and password as we chose when creating the
bookserver user account.
There will now be a data base file called
/opt/Bookserver/pathagar/db/database.db' (unless you have chosen not to
follow our advice in which case it will be called
'/opt/Bookserver/pathagar/database.db'.)
</para>
</sect2>  <!-- End of Database initiallization -->

<sect2><title>Ownerships and Permissions</title>
<para>
A word about ownerships and permissions: the account ('www-data' in the
case of our Debian system) owning the Web server process must have write
access both for the database file itself AND the directory containing that
database file. This is because it must sometimes write a temporary file to
this directory.<footnote><para>The need for the Web server account to have write
privileges for BOTH the database file AND its parent directory is 
documented in the Django notes but we were not aware of it.  It was Bernie 
Innocenti who tracked down this problem for us by using the traceroute 
command to discover attempts to write the temporary file. </para>
</footnote>
This account must also have write permissions to all the
other data that it might have occassion to modify when carrying out
administrative tasks.  These are within the 'static_media' directory. 
In general it is advisable for this user to NOT have write priviledges for 
any files that she does not NEED to write.
</para> <para>
There are two ways to solve this problem. The simplest is to give www-data
permission to write to the /opt/Bookserver/pathagar directory (not
advisable.)  For security reasons, Bernie recommends instead to 
place the database file into its own subdirectory and give www-data 
write permissions only for directories that it must modify, of which 
that directory is one.  This is the approach we chose to use.
</para> <para>
To deal with these issues, the following is suggested: 
<programlisting>
# cd /opt/Bookserver
# chown bookserver:www-data -R /opt/Bookserver/pathagar
# cd pathagar
# chmod g+w -R db static_media 
</programlisting>
WWW-data will now be able to write to the 'static_media' directory 
as well as to the database and the db directory.
</para>
<para>
If you are using a physical machine (not VM) you will want to now 
<link linkend="apacheConf">configure the Apache server</link>.
</para></sect2>  <!-- End of Ownerships and permissions -->


</sect1>  <!-- End of Pathagar installation -->


<sect1 xml:id='testingVM'><title>Testing under VM</title>

<sect2><title>Bridge VM to Interface</title>
<para>
Start Virtual Box and then:
<literallayout>
Settings > Network and bridge to the appropriate interface.
</literallayout>
If you are connected wirelessly, you will probably select wlan0; if
connected by wire, you'll probably want eth0. This is to get an IP 
address (via dhcp) for the virtual machine.</para>
</sect2>  <!-- End of Bridge VM to Interface -->

<sect2><title>Start the Server and Log On to Discover IP</title>
<para>
With VM running, begin by double clicking on vm-pathagar. This takes a 
while and you'll have to click ok to several info boxes. 
<literallayout>
Log in as pat with password "pat's password"
</literallayout>
The log in takes a little longer than you might expect. Next, you need to
know which IP was given the server.
<programlisting>
$ ifconfig 
</programlisting>
Look for lines that look like the following.
<computeroutput>
wlan0     Link encap:Ethernet  HWaddr 00:1e:65:c6:1a:06  
          inet addr:10.0.0.19  Bcast:10.0.0.255  Mask:255.255.255.0
</computeroutput>
Make a note of the IP address that follows "addr:".  The output shown above
is for wlan0. Your's might be eth0 or possibly something else. You might
have more than one. Pick the one that is NOT "lo" and that shows a "dotted
quad" after "addr:". In the output shown it is 10.0.0.19.  </para>
</sect2>  <!-- End of Start Server and Discover IP -->

<sect2 xml:id="test"><title>Test Pathagar Functionality</title>
<para>
Under the assumption that <application>Pathagar</application>  is now 
running, open a browser on your host machine (or any machine on the 
same network) and point it to <literal>http://10.0.0.19</literal> 
(substituting your dotted quad.) If all is well, the Pathagar book server 
will be at your service. If you chose to install the 
<filename>vm-pathagar.ova</filename>"Appliance" as described 
<link linkend="ova"> here </link>,
then you will be offered Sameeer's content choices.</para>
</sect2>  <!-- End of Test the Server -->
<sect2><title> Check Pathagar Functionality </title>
<para>
You now have your browser (client) connected to pathagar (the server.)
Pathagar can be administered either by logging in (as
<literal>bookserver</literal>) and then clicking on the 
<literal>Add Book</literal> tab or entering the following in the URL line 
of your browser: <literal>10.0.0.19/admin</literal>
substituting your dotted quad.
</para>
</sect2>  <!-- End of Check Pathagar Functionality -->

<sect2> <title> Pathagar Administration </title>
<para>
If you've followed the instructions, pathagar files will be in directory
'/opt/Bookserver/pathagar'.
</para>
</sect2>  <!-- End of Pathagar Administration -->

</sect1>  <!-- End of Test the Pathagar Installation -->


<sect1 xml:id="deployPat"> <title> Deploying Pathagar </title>
<sect2 xml:id="apacheConf"> <title>Configure Apache</title>
<para> Keep in mind that Debian based distros are 'enhanced' with features
that are used here so the instructions provided will have to be modified
if using Fedora or some other distribution.</para> <para>
As root, create <filename>/etc/apache2/sites-available/library</filename>
('library' can be any name of your choosing) 
so its contents are as follows:
<literallayout>
    &lt;VirtualHost *:80&gt;
        ServerName pathagar.info
        ServerName www.pathagar.info
        ServerAlias biblio
        ServerAdmin bookserver@someISP.com
        &lt;Location "/"&gt;
            SetHandler python-program
            PythonHandler django.core.handlers.modpython
            SetEnv DJANGO_SETTINGS_MODULE pathagar.settings
            PythonDebug On
            PythonPath "['/opt/Bookserver'] + sys.path" 
       &lt;/Location&gt;
        ErrorLog /var/log/apache2/pathagar-error.log
        LogLevel debug
        # Possible values for LogLevel include: 
        # debug, info, notice, warn, error, crit, alert, emerg.
        CustomLog /var/log/apache2/pathagar-access.log combined
        ServerSignature On
    &lt;/VirtualHost&gt;
</literallayout>
Note that <envar>LogLevel</envar> has been set to
<parameter>debug</parameter>.  We set it here initially to help with any
debugging that might prove necessary.  You might eventually want to change
it to the default <parameter>warn</parameter>. 
</para><para>
The "ServerName" and "ServerAlias" 
<footnote>
<para>
When setting up the DreamPlug for the Madagascar 2013 deployment I found
that the server would hang and never actually serve the pathagar page
although the URL line was recognized.  The solution was to add a 
"ServerAlias biblio" clause since the plug had been set up as a DNS server
(dnsmasq) resolving 'biblio' to itself.  Without this clause the request
was coming to the server's IP but the server had no way of knowing that it
was to be directed to Pathagar; or at least that's my assumption.
</para>
</footnote>
clauses are only necessary if you are 
using name based virtual hosting, however using a Fully Qualified Domain 
Name is a good idea as
<link linkend="fqdn">discussed else where</link>.
</para><para>
The following commands are Debian Apache specific. The first two enable the
'site' named 'library' and disable 'default; the next two enable needed
Apache modules.
The <command>a2dissite default</command> command isn't necessary if you are
using virtual name based hosting.
Apache must be restarted for all these changes to take effect.
<programlisting>
    # a2ensite library
    # a2dissite default
    # a2enmod python
    # a2enmod cgid
    # etc/init.d/apache2 restart
</programlisting>
</para>
</sect2>  <!-- End of Configuring Apache2 -->

<sect2> <title>Testing Pathagar Server</title>
<para>Assuming your machine is network connected, pointing a browser to it
will provide you with the Pathagar 'home page.'
</para>
</sect2>

</sect1>  <!-- End of Deploying Pathagar -->

<sect1 xml:id="ia"> <title>Internet Archive<footnote> <para>
<quote>
The Internet Archive, a 501(c)(3) non-profit, is building a digital library
of Internet sites and other cultural artifacts in digital form. Like a
paper library, we provide free access to researchers, historians, scholars,
and the general public. 
</quote> </para> </footnote> and Fetch IA</title>

<sect2 xml:id="installFetch"> 
<title>Install <filename>fetch_ia_item.py</filename></title>
<para>
For the time being, we've decided that this utility should reside in 
<filename>/home/bookserver</filename>. As user <literal>bookserver</literal>
execute the following commands.
<programlisting>
$ cd
$ git clone git://github.com/rajbot/fetch_ia_item.git
$ cd fetch_ia_item
</programlisting>
</para>
</sect2>  <!--  End of Install fetch_ia_item.py  -->


<sect2 xml:id="configureFetch">  <title>Configure Fetch IA</title>
<para>
Edit <filename>/home/bookserver/fetch_ia_item/fetch_ia_item.py</filename>
<footnote><para>
This script will download all of a user's bookmarked items from
archive.org.
</para><para>
The archive.org username and requested file formats are listed at the top
of the script, and can be edited to meet your needs.
</para><para>
An example of a user's bookmarked items is 
<link xlink:href="http://archive.org/bookmarks/sverma">
here</link>.
</para></footnote>
to change <literal>username = 'sverma'</literal> to what ever user name you
set up for yourself at 
<link xlink:href="archive.org">Internet Archive</link>.
They provide a mechanism to create an account and for account holders 
to bookmark content.
</para>
</sect2>  <!--  End of Configure Fetch IA  -->


<sect2 xml:id="fetchIA">  <title>Import Content</title>
<para> Running <application>fetch_ia_item.py</application> will bring in the 
designated user's bookmarked books (or other media) from the the archive. 
<programlisting>
$ cd /home/bookserver/fetch_ia_item
$ ./fetch_ia_item.py
</programlisting>
The <filename>items</filename> directory is created by the first import and
subsequent imports, add to its content.
Each import creates the file
<filename>pathagar.json</filename> which contains information used by
<application>Pathagar</application> to assimilate the content as described
in the next section.
</para>
</sect2>  <!--  End of Import Content  -->

<sect2 xml:id="json"> <title>Adding Content using JSON</title>
<para>
<application>pathagar</application> includes the facility to bring in
content defined in a <systemitem>json</systemitem> file. Continuing from
the last section:
<programlisting>
$ cd /opt/Bookserver/pathagar
$ ./manage.py addbooks --json /home/bookserver/fetch_ia_item/items/pathagar.json
</programlisting>
</para>
<para>
Alternatively one may add content using the web interface. The
<literal>Log In</literal> link in the upper right will provide an
opportunity to authenticate (name and password) and then 
<literal>Add Books</literal>
becomes an option.
</para>
</sect2>  <!--  End of Import Content  -->

<!--
fetch_ia_item.py
================
This script will download all of a user's bookmarked items from
archive.org.
The archive.org username and requested file formats are listed at the top
of the script, and can be edited to meet your needs.
An example of a user's bookmarked items is here:
http://archive.org/bookmarks/sverma
--> 
</sect1>  <!-- End of Fetch IA -->

<sect1 xml:id="appendix"><title>Appendix</title>

<sect2 xml:id='ova'>  <title>Pathagar Preinstalled OVA</title>
<para> Sameer has provide an OVA file for download 
<link xlink:href=
"http://dev.laptop.org/~sverma/pathagar/vm-pathagar.ova.zip">
here.</link> 
<footnote><para>
This <literal>ova</literal> file dates back to prior versions of Pathagar
and has not been updated.  Check with Sameer if you would like an updated
version, (or you could create your own and I'll include a link to it.)
</para></footnote>
It provides a <application>Virtual Box</application>
"Appliance" already containing the OS and Pathagar. Once downloaded, 
(it'll probably be in your <filename>~/Downloads</filename> directory)
carry out the following commands.
<programlisting>
$ cd ~/Downloads
$ unzip vm-pathagar.ova.zip
$ md5sum vm-pathagar.ova
</programlisting>
The output of the <command>md5sum</command> command should be
<computeroutput>ce6414f6c7b1c901211fc5f366a9e135</computeroutput>. 
If it isn't, your download may have been corrupted; redo it.
<literallayout>
In VirtualBox: 
File > Import Appliance and point to the OVA file.
Accept the defaults and [Import]- it takes a couple of minutes.
</literallayout>
Once at this point, you are ready to 
<link linkend="test"> Test the Server</link>.
</para>

</sect2>  <!-- End of Pathagar Preinstalled OVA    -->

<sect2>     <title>Request for Comments</title>
<para>
Comments,corrections, and/or suggestions are most welcome.  
Please direct them to akleider@sonic.net.</para>
</sect2>  

</sect1>

</article>
<!--
http://pathagar.info:5380/latest/ => book server running on the Pi
http://pathagar.info:5180/ => these notes running on SheevaPlug
Planning to deploy dp7 running Seth's version of Pathagar at
http://pathagar.info:5287 => Seth's version of Pathagar.

external link:
<link xlink:href="http://creativecommons.org/licenses">
or:
<para> Sameer has provide an OVA file for download 
<link xlink:href=
"http://dev.laptop.org/~sverma/pathagar/vm-pathagar.ova.zip">
here.</link> 
Local link:
target:
<sect2 xml:id='ova'>  <title>Pathagar Preinstalled OVA</title>
label:
More information is available in the 
<link linkend="ova">appendix</link>.

-->

